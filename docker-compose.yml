version: "2"

services:
  bot_alpha_checker:
#    image: ferdinandthe2/bot_alpha_checker:latest
    build:
      dockerfile: Dockerfile
      # Launch container only after 'postgres_alpha_checker'
      # returns positive healthcheck result
    depends_on:
      postgres_alpha_checker:
        condition: service_healthy
    environment:
      HOST: ${HOST}
      PORT: ${PORT}
      DB_NAME: ${DB_NAME}
      APP_USER: ${APP_USER}
      PASSWORD: ${PASSWORD}

      HOST_LINK: ${HOST_LINK}
      PORT_LINK: ${PORT_LINK}
      DB_NAME_LINK: ${DB_NAME_LINK}
      APP_USER_LINK: ${APP_USER_LINK}
      PASSWORD_LINK: ${PASSWORD_LINK}

      HOST_POSTBACK: ${HOST_POSTBACK}
      PORT_POSTBACK: ${PORT_POSTBACK}
      DB_NAME_POSTBACK: ${DB_NAME_POSTBACK}
      APP_USER_POSTBACK: ${APP_USER_POSTBACK}
      PASSWORD_POSTBACK: ${PASSWORD_POSTBACK}

    volumes:
      - checker_logs:/alpha_checker/logs

  postgres_alpha_checker:
    # Check if db ready to connection
#    image: ferdinandthe2/postgres_alpha_checker:latest
    build: ./config
    healthcheck:
      test: ["CMD", "pg_isready", "--username=postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: [ "postgres", "-c", "log_statement=all" ]
    environment:
      POSTGRES_USER: ${APP_USER}
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: on-failure
    ports:
      - "5432:5432"
    volumes:
      - checker_db:/var/lib/postgresql/data

  django_alpha_checker:
#    image: ferdinandthe2/django_alpha_checker:latest
    build: ./django_alpha_checker
    # Launch container only after 'postgres_alpha_checker'
    # returns positive healthcheck result
    depends_on:
      postgres_alpha_checker:
        condition: service_healthy
    entrypoint: /django_alpha_checker/entrypoint.sh
    environment:
      HOST: ${HOST}
      PORT: ${PORT}
      DB_NAME: ${DB_NAME}
      APP_USER: ${APP_USER}
      PASSWORD: ${PASSWORD}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_PASSWORD}
    ports:
      - "8080:8000"

volumes:
  checker_db:
    driver: local
  checker_logs: