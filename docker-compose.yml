version: "2"

services:
  bot_alpha_checker:
    image: ferdinandthe2/bot_alpha_checker:latest
#    build:
#      dockerfile: Dockerfile
      # Launch container only after 'postgres_alpha_checker'
      # returns positive healthcheck result
    depends_on:
      postgres_alpha_checker:
        condition: service_healthy
    environment:
      HOST: ${{ secrets.HOST }}
      PORT: ${{ secrets.PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      APP_USER: ${{ secrets.APP_USER }}
      PASSWORD: ${{ secrets.PASSWORD }}

      HOST_LINK: ${{ secrets.HOST_LINK }}
      PORT_LINK: ${{ secrets.PORT_LINK }}
      DB_NAME_LINK: ${{ secrets.DB_NAME_LINK }}
      APP_USER_LINK: ${{ secrets.APP_USER_LINK }}
      PASSWORD_LINK: ${{ secrets.PASSWORD_LINK }}

      HOST_POSTBACK: ${{ secrets.HOST_POSTBACK }}
      PORT_POSTBACK: ${{ secrets.PORT_POSTBACK }}
      DB_NAME_POSTBACK: ${{ secrets.DB_NAME_POSTBACK }}
      APP_USER_POSTBACK: ${{ secrets.APP_USER_POSTBACK }}
      PASSWORD_POSTBACK: ${{ secrets.PASSWORD_POSTBACK }}

    volumes:
      - checker_logs:/alpha_checker/logs

  postgres_alpha_checker:
    # Check if db ready to connection
    image: ferdinandthe2/postgres_alpha_checker:latest
    healthcheck:
      test: ["CMD", "pg_isready", "--username=postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: [ "postgres", "-c", "log_statement=all" ]
    environment:
      POSTGRES_USER: ${{ secrets.APP_USER }}
      POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
      POSTGRES_DB: ${{ secrets.DB_NAME }}
    restart: on-failure
    ports:
      - "5432:5432"
    volumes:
      - checker_db:/var/lib/postgresql/data

  django_alpha_checker:
    image: ferdinandthe2/django_alpha_checker:latest
    # Launch container only after 'postgres_alpha_checker'
    # returns positive healthcheck result
    depends_on:
      postgres_alpha_checker:
        condition: service_healthy
    entrypoint: /django_alpha_checker/entrypoint.sh
    environment:
      HOST: ${{ secrets.HOST }}
      PORT: ${{ secrets.PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      APP_USER: ${{ secrets.APP_USER }}
      PASSWORD: ${{ secrets.PASSWORD }}
      DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_PASSWORD }}
    ports:
      - "8080:8000"

volumes:
  checker_db:
    driver: local
  checker_logs: